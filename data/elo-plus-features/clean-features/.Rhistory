library(ggplot2)
library(scales)
#library(ggthemes)
library(grid)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b") +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
indicators <- c("Unemployment Rate\n(negative)", "Change in Unemployment\nRate (negative)",
"Leading Indicator\n(Conference Board)", "Index of Consumer\nConfidence (Michigan)")
methods <- c("Sentence-Level \n Classifier", "Article-Level \n Classifier", "README \n Method")
values <- c(    0.4559, 0.1021, 0.2558, 0.4917,
0.4651, 0.1201, 0.2738, 0.4977,
0.3236, 0.1261, 0.1546, 0.3969)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
library(ggplot2)
library(scales)
#library(ggthemes)
library(grid)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b") +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
indicators <- c("Unemployment Rate\n(negative)", "Change in Unemployment\nRate (negative)",
"Leading Indicator\n(Conference Board)", "Index of Consumer\nConfidence (Michigan)")
methods <- c("Sentence-Level\nClassifier", "Article-Level\nClassifier", "README\nMethod")
values <- c(    0.4559, 0.1021, 0.2558, 0.4917,
0.4651, 0.1201, 0.2738, 0.4977,
0.3236, 0.1261, 0.1546, 0.3969)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
library(ggplot2)
library(scales)
#library(ggthemes)
library(grid)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b") +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/02-sentence-article-readme-comparison.pdf", height=2.5, width=9)
indicators <- c("Unemployment Rate\n(negative)", "Change in Unemployment\nRate (negative)",
"Leading Indicator\n(Conference Board)", "Index of Consumer\nConfidence (Michigan)")
methods <- c("Binary Classifier\n[Accuracy = 74.4%]",
"Linear Classifier\n[Accuracy = 62.4%]", "Only Extreme Values\n[Accuracy = 72.4%]")
old_values <- c(	0.3616, 0.1690, 0.3292, 0.4191,
0.1169, 0.1169, 0.2409, 0.2758,
0.4085, 0.1002, 0.2646, 0.2503)
values <- c(    0.4713, 0.1064, 0.2969, 0.5286,
0.1555, 0.0844, 0.2116, 0.2767,
0.5173, 0.0773, 0.2721, 0.4453)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b", data=data.frame(correlation=c(-.1, 0.60), method=NA, indicator=NA)) +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
indicators <- c("Unemployment Rate\n(negative)", "Change in Unemployment\nRate (negative)",
"Leading Indicator\n(Conference Board)", "Index of Consumer\nConfidence (Michigan)")
methods <- c("Sentence-Level\nClassifier", "Article-Level\nClassifier", "README\nMethod")
values <- c(    0.4559, 0.1021, 0.2558, 0.4917,
0.4651, 0.1201, 0.2738, 0.4977,
0.3236, 0.1261, 0.1546, 0.3969)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
library(ggplot2)
library(scales)
#library(ggthemes)
library(grid)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b") +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/02-sentence-article-readme-comparison.pdf", height=3, width=8)
indicators <- c("Unemployment Rate\n(negative)", "Change in Unemployment\nRate (negative)",
"Leading Indicator\n(Conference Board)", "Index of Consumer\nConfidence (Michigan)")
methods <- c("Binary Classifier\n[Accuracy = 74.4%]",
"Linear Classifier\n[Accuracy = 62.4%]", "Only Extreme Values\n[Accuracy = 72.4%]")
old_values <- c(	0.3616, 0.1690, 0.3292, 0.4191,
0.1169, 0.1169, 0.2409, 0.2758,
0.4085, 0.1002, 0.2646, 0.2503)
values <- c(    0.4713, 0.1064, 0.2969, 0.5286,
0.1555, 0.0844, 0.2116, 0.2767,
0.5173, 0.0773, 0.2721, 0.4453)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b", data=data.frame(correlation=c(-.1, 0.60), method=NA, indicator=NA)) +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=3, width=8)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=2.5, width=8)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=2.5, width=9)
rm(list=ls())
options(stringsAsFactors=F)
#############################
library(ggplot2)
library(scales)
library(ggthemes)
library(grid)
indicators <- c("Unemployment Rate\n(negative)", "Change in Unemployment\nRate (negative)",
"Leading Indicator\n(Conference Board)", "Index of Consumer\nConfidence (Michigan)")
methods <- c("Binary Classifier\n[Accuracy = 74.4%]",
"Linear Classifier\n[Accuracy = 62.4%]", "Only Extreme Values\n[Accuracy = 72.4%]")
old_values <- c(	0.3616, 0.1690, 0.3292, 0.4191,
0.1169, 0.1169, 0.2409, 0.2758,
0.4085, 0.1002, 0.2646, 0.2503)
values <- c(    0.4713, 0.1064, 0.2969, 0.5286,
0.1555, 0.0844, 0.2116, 0.2767,
0.5173, 0.0773, 0.2721, 0.4453)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b", data=data.frame(correlation=c(-.1, 0.60), method=NA, indicator=NA)) +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=3, width=9)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=2, width=9)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=2.5, width=9)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=3, width=9)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=2.5, width=9)
indicators <- c("Unemployment Rate\n(negative)", "Change in Unemployment\nRate (negative)",
"Leading Indicator\n(Conference Board)", "Index of Consumer\nConfidence (Michigan)")
methods <- c("Sentence-Level\nClassifier", "Article-Level\nClassifier", "README\nMethod")
values <- c(    0.4559, 0.1021, 0.2558, 0.4917,
0.4651, 0.1201, 0.2738, 0.4977,
0.3236, 0.1261, 0.1546, 0.3969)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
library(ggplot2)
library(scales)
library(ggthemes)
library(grid)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b") +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/02-sentence-article-readme-comparison.pdf", height=3, width=8)
library(cem)
citation(cem)
citation("cem")
## Author: Ryan McMahon
## Date Created: 04/30/16
## Date Last Modified: 04/30/16
## File: "~/IST597k/NBA/code/features/02-game-feature-cleaning.R"
## Purpose:
##         Clean the game level data so that the features can be added to the
##         elo-plus data (see, '~/01-elo-plus-features-538-method-1516.csv').
## Program and Hardware Information:
# R 3.1.3 "Smooth Sidewalk"; 64-bit
# Windows 8.1; MSi GE60 2PL Apache Laptop
################################################################################
rm(list=ls())
library(stringr)
set.seed(11769)
options(stringsAsFactors = F)
######################
## OFFICIATING DATA
######################
## Read in game ids so they can be merged with the officials data.
setwd("C:/Users/rbm166/Dropbox/IST597k/NBA/data/")
games <- read.csv("unique_GameIDs.csv")
## Read in the officials data to clean:
offs <- read.csv(file = "game_officials_data.csv")
table(offs$X)
# There is one game with only two refs
## Find the game with just two refs:
bythree <- seq(from = 1, to = 3690, by = 3)
ref_gms <- list()
for(i in 1:length(bythree)){
ref_gms[[i]] <- offs$X[bythree[i]:(bythree[i]+2)]
}
lapply(ref_gms,table)
ref_gms <- do.call(rbind, ref_gms)
for(i in 1:nrow(ref_gms)){
temp <- ref_gms[i,] == c(0,1,2)
if(F %in% temp == T){
print(i)
stop()
}
}
# 1064
# Error
# Okay, so the 1064th game is the issue
## Put in the game ids to the offs data frame up to the weird one:
offs$game_id <- NA
end1 <- 1063*3
bythree <- seq(from = 1, to = end1, by = 3)
for(i in 1:length(bythree)){
offs$game_id[bythree[i]:(bythree[i]+2)] <- games$GAME_ID[i]
}
## Deal with the weird one:
offs$game_id[(end1+1):(end1+2)] <- games$GAME_ID[i+1]
j <- i + 2
## Put in the remaining game ids:
end2 <- nrow(offs)
bythree <- seq(from = end1+3, to = end2, by = 3)
for(i in 1:length(bythree)){
offs$game_id[bythree[i]:(bythree[i]+2)] <- games$GAME_ID[j]
j <- j + 1
}
## Put name variables into one cell:
offs$name <- paste(offs$FIRST_NAME, offs$LAST_NAME)
## Make all colnames lowercase and remove old name vars:
colnames(offs) <- tolower(colnames(offs))
offs <- offs[,-c(3,4)]
## Transform from long to wide format:
offs <- reshape(data = offs, v.names = colnames(offs)[c(2,3,5)], idvar = "game_id",
timevar = "x", direction = "wide")
## Fix the new wide colnames:
colnames(offs)[c(2,5,8)] <- paste0("ref_id",1:3)
colnames(offs)[c(3,6,9)] <- paste0("ref_jersey",1:3)
colnames(offs)[c(4,7,10)] <- paste0("ref_name",1:3)
## Write to new csv:
setwd("C:/Users/rbm166/Dropbox/IST597k/NBA/data/elo-plus-features/clean-features/")
write.csv(x = offs, file = "02a-clean_game_officials_data.csv", row.names = F)
################################################################################
rm(list=ls())
gc()
library(stringr)
set.seed(11769)
options(stringsAsFactors = F)
######################
## TEAM GAME DATA
######################
setwd("C:/Users/rbm166/Dropbox/IST597k/NBA/data/")
tm.adv <- read.csv("game_adv_team_data.csv")
tm.norm <- read.csv("game_norm_team_data.csv")
## Make colnames lowercase:
colnames(tm.adv) <- tolower(colnames(tm.adv))
colnames(tm.norm) <- tolower(colnames(tm.norm))
## Read in game ids so we can use the game dates to generate rolling values:
games <- read.csv("unique_GameIDs.csv")
colnames(games) <- tolower(colnames(games))
## Put game dates into the team data frames:
tm.adv$game_date <- tm.norm$game_date <- NA
for(i in 1:nrow(games)){
tm.adv$game_date[which(tm.adv$game_id == games$game_id[i])] <-
games$game_date[i]
tm.norm$game_date[which(tm.norm$game_id == games$game_id[i])] <-
games$game_date[i]
}
## Format dates:
tm.adv$game_date <- as.Date(tm.adv$game_date)
tm.norm$game_date <- as.Date(tm.adv$game_date)
## Insert a seasongame variable and calculate pregame season avgs:
uni.tms <- unique(tm.adv$team_id)
tm.adv$seasongame <- tm.norm$seasongame <- NA
for(i in 1:length(uni.tms)){
temp1 <- tm.adv[which(tm.adv$team_id == uni.tms[i]),]
temp2 <- tm.norm[which(tm.norm$team_id == uni.tms[i]),]
temp1 <- temp1[order(temp1$game_date),]
temp2 <- temp2[order(temp2$game_date),]
# Put in seasongame variable
temp1$seasongame <- 1:nrow(temp1)
temp2$seasongame <- 1:nrow(temp2)
# calculate expanding window season averages
a <- b <- list()
for(j in 2:nrow(temp1)){
a[[j]] <- unlist(apply(temp1[which(temp1$seasongame < j), c(7:21)],
2, mean))
b[[j]] <- unlist(apply(temp2[which(temp2$seasongame < j),7:25],
2, mean))
}
# Put the expanding window data back into the temp data frames
temp1[2:nrow(temp1),7:21] <- do.call(rbind, a)
temp2[2:nrow(temp2),7:25] <- do.call(rbind, b)
# Substitute the subset in for the original data
tm.adv[which(tm.adv$team_id == uni.tms[i]),] <- temp1
tm.norm[which(tm.norm$team_id == uni.tms[i]),] <- temp2
}
## Merge the two data sets together and clean:
df <- merge(tm.norm, tm.adv, by = c("game_id", "team_id"))
rpt.cols <- grep(pattern = "*[.]y", x = colnames(df))
df <- df[,-rpt.cols]
new.cols <- gsub(pattern = "[.]x", replacement = "", x = colnames(df))
colnames(df) <- new.cols
## Write to new csv:
setwd("C:/Users/rbm166/Dropbox/IST597k/NBA/data/elo-plus-features/clean-features/")
write.csv(x = df, file = "02b-clean_game_team_adv_norm_data.csv", row.names = F)
################################################################################
rm(list=ls())
gc()
library(stringr)
set.seed(11769)
options(stringsAsFactors = F)
######################
## PLAYER GAME DATA
######################
setwd("C:/Users/rbm166/Dropbox/IST597k/NBA/data/")
adv <- read.csv("game_adv_player_data.csv")
colnames(adv) <- tolower(colnames(adv))
## Read in game ids so we can use the game dates to generate rolling values:
games <- read.csv("unique_GameIDs.csv")
colnames(games) <- tolower(colnames(games))
## Put game dates into the player data frames:
adv$game_date <- NA
for(i in 1:nrow(games)){
adv$game_date[which(adv$game_id == games$game_id[i])] <-
games$game_date[i]
}
## Format dates:
adv$game_date <- as.Date(adv$game_date)
## Insert a seasongame variable and calculate pregame season avgs:
uni.tms <- unique(adv$team_id)
adv$seasongame <- NA
## New data frame w/o non-starting player rows:
adv.new <- adv[-which(adv$start_position == ""), ]
## Create data frame to have one row for all games:
df <- data.frame(matrix(data = NA, nrow = nrow(games)*2, ncol = 11))
colnames(df) <- c("game_id", "team_id", "seasongame", "avg_pie", "max_usg",
"all_start", "p1_start", "p2_start", "p3_start", "p4_start",
"p5_start")
dfseq <- seq(1,nrow(games)*2, by = 82)
gmidseq <- seq(1, 410, by = 5)
for(i in 1:length(uni.tms)){
temp1 <- adv.new[which(adv.new$team_id == uni.tms[i]),]
temp2 <- adv[which(adv$team_id == uni.tms[i]),]
temp1 <- temp1[order(temp1$game_date),]
temp2 <- temp2[order(temp2$game_date),]
uni.gms <- unique(temp2$game_id)
for(j in 1:82){
temp2$seasongame[which(temp2$game_id == uni.gms[j])] <- j
}
# Put in seasongame variable
temp1$seasongame <- sort(rep(1:82, times = 5))
df[dfseq[i]:(dfseq[i]+81), 1] <- temp1$game_id[gmidseq]             # id
df[dfseq[i]:(dfseq[i]+81), 2] <- temp1$team_abbreviation[gmidseq]   # team
df[dfseq[i]:(dfseq[i]+81), 3] <- 1:82                               # seasongame
df[dfseq[i], 4] <- mean(temp1$pie[which(temp1$seasongame == 1)])    # avg pie
df[dfseq[i], 5] <- max(temp1$usg_pct[which(temp1$seasongame == 1)]) # max usg
df[dfseq[i], 6:11] <- 0                                             # line-up counts
a <- matrix(NA, nrow = 82, ncol = 6)
a[1,] <- c(1, temp1$player_id[which(temp1$seasongame == 1)])
# Calculate expanding window starting line-up counts
for(j in 2:82){
# Starting line-up shit
temp3 <- temp1[which(temp1$seasongame==j),]
a[j,] <- c(j, temp3$player_id)
count <- 0
for(k in 1:(j-1)){
test.all <- length(which(temp3$player_id %in% a[k,2:6] == T))
if(test.all == 5) count <- count + 1
}
df[(dfseq[i]+j-1),6] <- count
df[(dfseq[i]+j-1),7] <- length(which(temp3$player_id[1] == a[1:(j-1),2:6]))
df[(dfseq[i]+j-1),8] <- length(which(temp3$player_id[2] == a[1:(j-1),2:6]))
df[(dfseq[i]+j-1),9] <- length(which(temp3$player_id[3] == a[1:(j-1),2:6]))
df[(dfseq[i]+j-1),10] <- length(which(temp3$player_id[4] == a[1:(j-1),2:6]))
df[(dfseq[i]+j-1),11] <- length(which(temp3$player_id[5] == a[1:(j-1),2:6]))
# Average pie and max usage
df[(dfseq[i]+j-1),4] <-
mean(temp2$pie[which(temp2$player_id %in% temp3$player_id == T &
temp2$seasongame < j)], na.rm = T)
usg <- NA
for(k in 1:5){
usg[k] <- mean(temp2$usg_pct[which(temp2$player_id == temp3$player_id[k] &
temp2$seasongame < j)], na.rm = T)
}
df[(dfseq[i]+j-1),5] <- max(usg)
}
}
setwd("C:/Users/rbm166/Dropbox/IST597k/NBA/data/elo-plus-features/clean-features/")
write.csv(x = df, file = "02c-clean_game_player_adv_data.csv", row.names = F)
