methods <- c("Binary Classifier\n[Accuracy = 74.4%]",
"Linear Classifier\n[Accuracy = 62.4%]", "Only Extreme Values\n[Accuracy = 72.4%]")
old_values <- c(	0.3616, 0.1690, 0.3292, 0.4191,
0.1169, 0.1169, 0.2409, 0.2758,
0.4085, 0.1002, 0.2646, 0.2503)
values <- c(    0.4713, 0.1064, 0.2969, 0.5286,
0.1555, 0.0844, 0.2116, 0.2767,
0.5173, 0.0773, 0.2721, 0.4453)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b", data=data.frame(correlation=c(-.1, 0.60), method=NA, indicator=NA)) +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
indicators <- c("Unemployment Rate\n(negative)", "Change in Unemployment\nRate (negative)",
"Leading Indicator\n(Conference Board)", "Index of Consumer\nConfidence (Michigan)")
methods <- c("Sentence-Level\nClassifier", "Article-Level\nClassifier", "README\nMethod")
values <- c(    0.4559, 0.1021, 0.2558, 0.4917,
0.4651, 0.1201, 0.2738, 0.4977,
0.3236, 0.1261, 0.1546, 0.3969)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
library(ggplot2)
library(scales)
#library(ggthemes)
library(grid)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b") +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/02-sentence-article-readme-comparison.pdf", height=3, width=8)
indicators <- c("Unemployment Rate\n(negative)", "Change in Unemployment\nRate (negative)",
"Leading Indicator\n(Conference Board)", "Index of Consumer\nConfidence (Michigan)")
methods <- c("Binary Classifier\n[Accuracy = 74.4%]",
"Linear Classifier\n[Accuracy = 62.4%]", "Only Extreme Values\n[Accuracy = 72.4%]")
old_values <- c(	0.3616, 0.1690, 0.3292, 0.4191,
0.1169, 0.1169, 0.2409, 0.2758,
0.4085, 0.1002, 0.2646, 0.2503)
values <- c(    0.4713, 0.1064, 0.2969, 0.5286,
0.1555, 0.0844, 0.2116, 0.2767,
0.5173, 0.0773, 0.2721, 0.4453)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b", data=data.frame(correlation=c(-.1, 0.60), method=NA, indicator=NA)) +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=3, width=8)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=2.5, width=8)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=2.5, width=9)
rm(list=ls())
options(stringsAsFactors=F)
#############################
library(ggplot2)
library(scales)
library(ggthemes)
library(grid)
indicators <- c("Unemployment Rate\n(negative)", "Change in Unemployment\nRate (negative)",
"Leading Indicator\n(Conference Board)", "Index of Consumer\nConfidence (Michigan)")
methods <- c("Binary Classifier\n[Accuracy = 74.4%]",
"Linear Classifier\n[Accuracy = 62.4%]", "Only Extreme Values\n[Accuracy = 72.4%]")
old_values <- c(	0.3616, 0.1690, 0.3292, 0.4191,
0.1169, 0.1169, 0.2409, 0.2758,
0.4085, 0.1002, 0.2646, 0.2503)
values <- c(    0.4713, 0.1064, 0.2969, 0.5286,
0.1555, 0.0844, 0.2116, 0.2767,
0.5173, 0.0773, 0.2721, 0.4453)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b", data=data.frame(correlation=c(-.1, 0.60), method=NA, indicator=NA)) +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=3, width=9)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=2, width=9)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=2.5, width=9)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=3, width=9)
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/03-continuous-vs-binary-classifier.pdf", height=2.5, width=9)
indicators <- c("Unemployment Rate\n(negative)", "Change in Unemployment\nRate (negative)",
"Leading Indicator\n(Conference Board)", "Index of Consumer\nConfidence (Michigan)")
methods <- c("Sentence-Level\nClassifier", "Article-Level\nClassifier", "README\nMethod")
values <- c(    0.4559, 0.1021, 0.2558, 0.4917,
0.4651, 0.1201, 0.2738, 0.4977,
0.3236, 0.1261, 0.1546, 0.3969)
df <- data.frame(
method = rep(methods, each=4),
indicator = rep(indicators, 3),
correlation = values)
df$method <- factor(df$method, levels=rev(methods))
df$indicator <- factor(df$indicator, levels=indicators)
library(ggplot2)
library(scales)
library(ggthemes)
library(grid)
p <- ggplot(df, aes(x=method, y=correlation, shape=indicator, color=indicator))
pq <- p + geom_point(size=5) + theme_bw() + coord_flip() +
scale_y_continuous("Correlation of Tone and Economic Time Series",
expand=c(0,0), limits=c(-0.10, 0.60), breaks=c(seq(-.1, .6, .1))) +
scale_shape_manual(values=c(15, 4, 18, 17)) +
theme(axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks.y = element_blank(),
legend.title=element_blank(),
legend.key.size=unit(1.5, "cm"),
legend.key = element_blank()) +
geom_hline(aes(yintercept=0), color="darkblue", alpha=.75, linetype=2) +
#geom_rangeframe(sides="b") +
guides(colour = guide_legend(override.aes = list(linetype=c(0,0,0,0),
shape=c(15, 4, 18, 17), size=c(7,7,7,7))))
pq
ggsave(pq, file="C:/Users/rbm166/Desktop/conference_poster_4/figures/02-sentence-article-readme-comparison.pdf", height=3, width=8)
library(cem)
citation(cem)
citation("cem")
a <- c("a", "b", "c", "d")
b <- c("b", "a", "c", "d")
c <- ifelse(test = a == b, yes = 1, no = 0)
rm(list=ls())
gc()
library(stringr)
library(randomForest)
set.seed(11769)
options(stringsAsFactors = T)
## Read in elo data:
setwd("C:/Users/rbm166/Dropbox/IST597k/NBA/data/elo-plus-features/")
df <- read.csv("03-elo-plus-all-features-538-method-1516.csv")
## Format variables
df$win_dum <- as.factor(df$win_dum)
df$date_game <- as.Date(as.character(df$date_game))
rm(list=ls())
gc()
library(stringr)
library(randomForest)
set.seed(11769)
options(stringsAsFactors = T)
## Read in elo data:
setwd("C:/Users/rbm166/Dropbox/IST597k/NBA/data/elo-plus-features/")
df <- read.csv("03-elo-plus-all-features-no-home-court-1516.csv")
## Format variables
df$win_dum <- as.factor(df$win_dum)
df$date_game <- as.Date(as.character(df$date_game))
rm(list=ls())
gc()
library(stringr)
library(randomForest)
set.seed(11769)
options(stringsAsFactors = T)
## Read in elo data:
setwd("C:/Users/rbm166/Dropbox/IST597k/NBA/data/elo-plus-features/")
df <- read.csv("03-elo-plus-all-features-no-home-court-1516.csv")
## Format variables
df$win_dum <- as.factor(df$win_dum)
df$date_game <- as.Date(as.character(df$date_game))
## Remove pts variables:
df <- df[,-c(10,14)]
## Remove elo_n variables:
to.remove <- grep("elo_n", colnames(df))
df <- df[,-to.remove]
## Randomly sample pairs so that the same game only appears once:
samp <- sample(x = c(0,1), size = nrow(df)/2, replace = T)
dfseq <- seq(1,nrow(df),by=2)
df2 <- df[1:2,]
df2 <- df2[which(df2$X_iscopy == samp[1]),]
for(i in 2:length(dfseq)){
temp <- df[dfseq[i]:(dfseq[i]+1),]
temp <- temp[which(temp$X_iscopy == samp[i]),]
df2 <- rbind(df2,temp)
}
df2 <- na.omit(df2)
samp <- sample(1:nrow(df2), 100, replace = F)
test <- df2[samp,]
df2 <- df2[-samp,]
z1 <- randomForest(x = df2[,-17], y = df2$win_dum, na.action = na.omit,
replace = T, ntree = 3000, mtry = 12, nodesize = 1,
importance = T, do.trace = T, keep.forest = T)
print(z1)
round(importance(z1), 2)
write.csv(x = df2, file = "05-clean-sampled-elo-plus-no-home-court.csv", row.names = F)
uni.tms <- unique(df2$team_id)
i <- 1
temp <- df2[which(df2$team_id == uni.tms[i]),]
temp <- temp[order(temp$seasongame),]
uni.tms <- unique(df$team_id)
temp <- df[which(df$team_id == uni.tms[i]),]
temp <- temp[order(temp$seasongame),]
j <- 2
mod <- lm(formula = elo_i ~ 1, data = temp[1:j,])
coef(mod)
mod <- lm(formula = elo_i ~ season_game, data = temp[1:j,])
mod <- lm(formula = elo_i ~ seasongame, data = temp[1:j,])
coef(mod)
mod <- lm(formula = elo_i ~ 0 + seasongame, data = temp[1:j,])
coef(mod)
mod <- lm(formula = elo_i ~ seasongame, data = temp[1:j,])
summary(mod)
coef(mod)[2]
mod <- lm(formula = elo_i ~ seasongame + I(seasongame^2), data = temp[1:j,])
temp$elo_dir1 <- temp$elo_dir2 <- 0
uni.tms <- unique(df$team_id)
new.df <- list()
for(i in 1:length(uni.tms)){
temp <- df[which(df$team_id == uni.tms[i]),]
temp <- temp[order(temp$seasongame),]
temp$elo_dir1 <- temp$elo_dir2 <- 0
for(j in 2:nrow(temp)){
mod <- lm(formula = elo_i ~ seasongame + I(seasongame^2), data = temp[1:j,])
vars <- coef(mod)[2:3]
temp$elo_dir1[j] <- vars[1]
temp$elo_dir2[j] <- vars[2]
}
new.df[[i]] <- temp
}
new.df <- do.call(rbind, new.df)
samp <- sample(x = c(0,1), size = nrow(new.df)/2, replace = T)
new.dfseq <- seq(1,nrow(new.df),by=2)
new.df2 <- new.df[1:2,]
new.df2 <- new.df2[which(new.df2$X_iscopy == samp[1]),]
for(i in 2:length(new.dfseq)){
temp <- new.df[new.dfseq[i]:(new.dfseq[i]+1),]
temp <- temp[which(temp$X_iscopy == samp[i]),]
new.df2 <- rbind(new.df2,temp)
}
mod <- lm(win_dum ~ elo_i*opp_elo_i + elo_dir1 + elo_dir2, data = new.df2)
mod <- glm(win_dum ~ elo_i*opp_elo_i + elo_dir1 + elo_dir2, data = new.df2, family = binomial('logit'))
summary(mod)
mod <- glm(win_dum ~ elo_i*opp_elo_i + elo_dir1, data = new.df2, family = binomial('logit'))
summary(mod)
mod <- glm(win_dum ~ elo_i*opp_elo_i, data = new.df2, family = binomial('logit'))
summary(mod)
mod <- glm(win_dum ~ elo_i+opp_elo_i, data = new.df2, family = binomial('logit'))
summary(mod)
mod <- glm(win_dum ~ elo_i+opp_elo_i+elo_dir1+elo_dir2 + factor(team_id), data = new.df2, family = binomial('logit'))
summary(mod)
uni.tms <- unique(df$team_id)
new.df <- list()
for(i in 1:length(uni.tms)){
temp <- df[which(df$team_id == uni.tms[i]),]
temp <- temp[order(temp$seasongame),]
temp$elo_dir1 <- 0
for(j in 2:nrow(temp)){
mod <- lm(formula = elo_i ~ seasongame, data = temp[1:j,])
vars <- coef(mod)[2]
temp$elo_dir1[j] <- vars
}
new.df[[i]] <- temp
}
new.df <- do.call(rbind, new.df)
samp <- sample(x = c(0,1), size = nrow(new.df)/2, replace = T)
new.dfseq <- seq(1,nrow(new.df),by=2)
new.df2 <- new.df[1:2,]
new.df2 <- new.df2[which(new.df2$X_iscopy == samp[1]),]
for(i in 2:length(new.dfseq)){
temp <- new.df[new.dfseq[i]:(new.dfseq[i]+1),]
temp <- temp[which(temp$X_iscopy == samp[i]),]
new.df2 <- rbind(new.df2,temp)
}
new.df2$win_dum <- as.numeric()
mod <- glm(win_dum ~ elo_i+opp_elo_i+elo_dir1+elo_dir2 + factor(team_id), data = new.df2, family = binomial('logit'))
summary(mod)
mod <- glm(win_dum ~ elo_i+opp_elo_i+elo_dir1 + factor(team_id), data = new.df2, family = binomial('logit'))
summary(mod)
preds <- predict(mod)
length(which(preds==na.omit(new.df2$win_dum)))/nrow(na.omit(new.df2))
length(which(preds==na.omit(new.df2$win_dum)))
preds <- predict(mod, type = "response")
preds <- ifelse(preds >= 0.5, 1, 0)
act <- na.omit(new.df2)$win_dum
length(which(preds==act)
)
act <- as.numeric(na.omit(new.df2)$win_dum)
act <- as.numeric(na.omit(new.df2)$win_dum) - 1
length(which(preds==act))
new.df2$win_dum <- as.numeric(new.df2$win_dum)
new.df2 <- na.omit(new.df2)
mod <- glm(win_dum ~ elo_i+opp_elo_i+elo_dir1 + factor(team_id), data = new.df2, family = binomial('logit'))
summary(mod)
preds <- predict(mod, type = "response")
preds <- ifelse(preds >= 0.5, 1, 0)
length(which(preds==new.df2$win_dum))
uni.tms <- unique(df$team_id)
new.df <- list()
for(i in 1:length(uni.tms)){
temp <- df[which(df$team_id == uni.tms[i]),]
temp <- temp[order(temp$seasongame),]
temp$elo_dir1 <- 0
for(j in 2:nrow(temp)){
mod <- lm(formula = elo_i ~ seasongame, data = temp[1:j,])
vars <- coef(mod)[2]
temp$elo_dir1[j] <- vars
}
new.df[[i]] <- temp
}
new.df <- do.call(rbind, new.df)
samp <- sample(x = c(0,1), size = nrow(new.df)/2, replace = T)
new.dfseq <- seq(1,nrow(new.df),by=2)
new.df2 <- new.df[1:2,]
new.df2 <- new.df2[which(new.df2$X_iscopy == samp[1]),]
for(i in 2:length(new.dfseq)){
temp <- new.df[new.dfseq[i]:(new.dfseq[i]+1),]
temp <- temp[which(temp$X_iscopy == samp[i]),]
new.df2 <- rbind(new.df2,temp)
}
new.df2$win_dum <- as.numeric(new.df2$win_dum)
new.df2 <- na.omit(new.df2)
mod <- glm(win_dum ~ elo_i+opp_elo_i+elo_dir1 + factor(team_id), data = new.df2, family = binomial('logit'))
summary(mod)
preds <- predict(mod, type = "response")
preds <- ifelse(preds >= 0.5, 1, 0)
length(which(preds==new.df2$win_dum))
new.df2$win_dum <- as.numeric(new.df2$win_dum)-1
mod <- glm(win_dum ~ elo_i+opp_elo_i+elo_dir1 + factor(team_id), data = new.df2, family = binomial('logit'))
summary(mod)
preds <- predict(mod, type = "response")
preds <- ifelse(preds >= 0.5, 1, 0)
length(which(preds==new.df2$win_dum))
table(preds,act)
table(preds,acts)
table(preds,new.df2$win_dum)
(tab <- table(preds,new.df2$win_dum))
sum(diag(tab))/sum(tab)
mod <- glm(win_dum ~ elo_i+opp_elo_i+ factor(team_id), data = new.df2, family = binomial('logit'))
summary(mod)
preds <- predict(mod, type = "response")
preds <- ifelse(preds >= 0.5, 1, 0)
length(which(preds==new.df2$win_dum))
(tab <- table(preds,new.df2$win_dum))
sum(diag(tab))/sum(tab)
## Author: Ryan McMahon
## Date Created: 05/01/16
## Date Last Modified: 05/01/16
## File: "~/IST597k/NBA/code/features/03-feature-merging.R"
## Purpose:
##         Add all of the game and player level feature data to the elo data:
##         (see, '~/01-elo-plus-features-538-method-1516.csv').
## Program and Hardware Information:
# R 3.1.3 "Smooth Sidewalk"; 64-bit
# Windows 8.1; MSi GE60 2PL Apache Laptop
################################################################################
rm(list=ls())
gc()
library(stringr)
library(randomForest)
set.seed(11769)
options(stringsAsFactors = T)
## Read in elo data:
setwd("C:/Users/rbm166/Dropbox/IST597k/NBA/data/elo-plus-features/")
df <- read.csv("03-elo-plus-all-features-no-home-court-1516.csv")
## Format variables
df$win_dum <- as.factor(df$win_dum)
df$date_game <- as.Date(as.character(df$date_game))
## Remove pts variables:
df <- df[,-c(10,14)]
## Remove elo_n variables:
to.remove <- grep("elo_n", colnames(df))
df <- df[,-to.remove]
## Randomly sample pairs so that the same game only appears once:
samp <- sample(x = c(0,1), size = nrow(df)/2, replace = T)
dfseq <- seq(1,nrow(df),by=2)
df2 <- df[1:2,]
df2 <- df2[which(df2$X_iscopy == samp[1]),]
for(i in 2:length(dfseq)){
temp <- df[dfseq[i]:(dfseq[i]+1),]
temp <- temp[which(temp$X_iscopy == samp[i]),]
df2 <- rbind(df2,temp)
}
df2 <- na.omit(df2)
samp <- sample(1:nrow(df2), 100, replace = F)
test <- df2[samp,]
df2 <- df2[-samp,]
z1 <- randomForest(x = df2[,-17], y = df2$win_dum, na.action = na.omit,
replace = T, ntree = 3000, mtry = 12, nodesize = 1,
importance = T, do.trace = T, keep.forest = T)
print(z1)
round(importance(z1), 2)
plot(z1)
partialPlot(z1, df2, forecast)
oos <- predict(object = z1, newdata = test, type = "response")
summary(oos)
test$win_dum
length(which(test$win_dum == oos))
uni.tms <- unique(df$team_id)
new.df <- list()
for(i in 1:length(uni.tms)){
temp <- df[which(df$team_id == uni.tms[i]),]
temp <- temp[order(temp$seasongame),]
temp$elo_dir1 <- 0
for(j in 2:nrow(temp)){
mod <- lm(formula = elo_i ~ seasongame, data = temp[1:j,])
vars <- coef(mod)[2]
temp$elo_dir1[j] <- vars
}
new.df[[i]] <- temp
}
new.df <- do.call(rbind, new.df)
samp <- sample(x = c(0,1), size = nrow(new.df)/2, replace = T)
new.dfseq <- seq(1,nrow(new.df),by=2)
new.df2 <- new.df[1:2,]
new.df2 <- new.df2[which(new.df2$X_iscopy == samp[1]),]
for(i in 2:length(new.dfseq)){
temp <- new.df[new.dfseq[i]:(new.dfseq[i]+1),]
temp <- temp[which(temp$X_iscopy == samp[i]),]
new.df2 <- rbind(new.df2,temp)
}
new.df2$win_dum <- as.numeric(new.df2$win_dum)-1
new.df2 <- na.omit(new.df2)
mod <- glm(win_dum ~ elo_i+opp_elo_i+ factor(team_id), data = new.df2, family = binomial('logit'))
summary(mod)
preds <- predict(mod, type = "response")
preds <- ifelse(preds >= 0.5, 1, 0)
length(which(preds==new.df2$win_dum))
(tab <- table(preds,new.df2$win_dum))
sum(diag(tab))/sum(tab)
mod <- glm(win_dum ~ elo_i+opp_elo_i+elo_dir1+factor(team_id), data = new.df2, family = binomial('logit'))
summary(mod)
preds <- predict(mod, type = "response")
preds <- ifelse(preds >= 0.5, 1, 0)
length(which(preds==new.df2$win_dum))
(tab <- table(preds,new.df2$win_dum))
sum(diag(tab))/sum(tab)
z2 <- randomForest(x = new.df2[,-17], y = new.df2$win_dum, na.action = na.omit,
replace = T, ntree = 3000, mtry = 12, nodesize = 1,
importance = T, do.trace = T, keep.forest = T)
new.df2$win_dum <- factor(new.df2$win_dum)
z2 <- randomForest(x = new.df2[,-17], y = new.df2$win_dum, na.action = na.omit,
replace = T, ntree = 3000, mtry = 12, nodesize = 1,
importance = T, do.trace = T, keep.forest = T)
print(z2)
z2 <- randomForest(x = new.df2[,-17], y = new.df2$win_dum, na.action = na.omit,
replace = T, ntree = 2000, mtry = 5, nodesize = 1,
importance = T, do.trace = T, keep.forest = T)
print(z2)
round(importance(z2), 2)
partialPlot(z2, new.df2, elo_dir1)
